//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jorge\source\repos\Final2\Final2\Content\DocumentSpec.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Final2.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DocumentSpecParser : Parser {
	public const int
		BOLD=1, ITALIC=2, UNDERLINE=3, TITLE=4, TITEND=5, CORCHETE=6, CORCHETEFINAL=7, 
		LLAVE=8, LLAVEFINAL=9, COMA=10, HYPHEN=11, HEADING1=12, HEADING2=13, HEADING3=14, 
		TEXT=15, WORD=16, WS=17;
	public const int
		RULE_document = 0, RULE_text = 1, RULE_boldText = 2, RULE_bold = 3, RULE_italicText = 4, 
		RULE_italic = 5, RULE_underlineText = 6, RULE_underline = 7, RULE_title = 8, 
		RULE_heading1 = 9, RULE_heading2 = 10, RULE_heading3 = 11, RULE_nested = 12, 
		RULE_list_item = 13, RULE_list_number = 14;
	public static readonly string[] ruleNames = {
		"document", "text", "boldText", "bold", "italicText", "italic", "underlineText", 
		"underline", "title", "heading1", "heading2", "heading3", "nested", "list_item", 
		"list_number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'~'", "'++'", "'>'", "'<'", "'['", "']'", "'{'", "'}'", 
		"','", "'-'", "'^'", "'^^'", "'^^^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOLD", "ITALIC", "UNDERLINE", "TITLE", "TITEND", "CORCHETE", "CORCHETEFINAL", 
		"LLAVE", "LLAVEFINAL", "COMA", "HYPHEN", "HEADING1", "HEADING2", "HEADING3", 
		"TEXT", "WORD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DocumentSpec.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DocumentSpecParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DocumentContext : ParserRuleContext {
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public List_itemContext[] list_item() {
			return GetRuleContexts<List_itemContext>();
		}
		public List_itemContext list_item(int i) {
			return GetRuleContext<List_itemContext>(i);
		}
		public List_numberContext[] list_number() {
			return GetRuleContexts<List_numberContext>();
		}
		public List_numberContext list_number(int i) {
			return GetRuleContext<List_numberContext>(i);
		}
		public BoldContext[] bold() {
			return GetRuleContexts<BoldContext>();
		}
		public BoldContext bold(int i) {
			return GetRuleContext<BoldContext>(i);
		}
		public ItalicContext[] italic() {
			return GetRuleContexts<ItalicContext>();
		}
		public ItalicContext italic(int i) {
			return GetRuleContext<ItalicContext>(i);
		}
		public UnderlineContext[] underline() {
			return GetRuleContexts<UnderlineContext>();
		}
		public UnderlineContext underline(int i) {
			return GetRuleContext<UnderlineContext>(i);
		}
		public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 41;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 30; text();
					}
					break;

				case 2:
					{
					State = 31; list_item();
					}
					break;

				case 3:
					{
					State = 32; list_number();
					}
					break;

				case 4:
					{
					State = 33; bold();
					}
					break;

				case 5:
					{
					State = 34; italic();
					}
					break;

				case 6:
					{
					State = 35; underline();
					}
					break;

				case 7:
					{
					State = 36; title();
					}
					break;

				case 8:
					{
					State = 37; heading1();
					}
					break;

				case 9:
					{
					State = 38; heading2();
					}
					break;

				case 10:
					{
					State = 39; heading3();
					}
					break;

				case 11:
					{
					State = 40; nested();
					}
					break;
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOLD) | (1L << ITALIC) | (1L << UNDERLINE) | (1L << TITLE) | (1L << CORCHETE) | (1L << LLAVE) | (1L << HEADING1) | (1L << HEADING2) | (1L << HEADING3) | (1L << TEXT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoldTextContext : ParserRuleContext {
		public ITerminalNode[] BOLD() { return GetTokens(DocumentSpecParser.BOLD); }
		public ITerminalNode BOLD(int i) {
			return GetToken(DocumentSpecParser.BOLD, i);
		}
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public BoldTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boldText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterBoldText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitBoldText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoldText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoldTextContext boldText() {
		BoldTextContext _localctx = new BoldTextContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_boldText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(BOLD);
			State = 48; Match(TEXT);
			State = 49; Match(BOLD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoldContext : ParserRuleContext {
		public BoldTextContext boldText() {
			return GetRuleContext<BoldTextContext>(0);
		}
		public ITerminalNode[] BOLD() { return GetTokens(DocumentSpecParser.BOLD); }
		public ITerminalNode BOLD(int i) {
			return GetToken(DocumentSpecParser.BOLD, i);
		}
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ItalicContext[] italic() {
			return GetRuleContexts<ItalicContext>();
		}
		public ItalicContext italic(int i) {
			return GetRuleContext<ItalicContext>(i);
		}
		public UnderlineContext[] underline() {
			return GetRuleContexts<UnderlineContext>();
		}
		public UnderlineContext underline(int i) {
			return GetRuleContext<UnderlineContext>(i);
		}
		public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public BoldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bold; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterBold(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitBold(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBold(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoldContext bold() {
		BoldContext _localctx = new BoldContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_bold);
		try {
			int _alt;
			State = 67;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; boldText();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; Match(BOLD);
				State = 61;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 61;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
						case 1:
							{
							State = 53; text();
							}
							break;

						case 2:
							{
							State = 54; italic();
							}
							break;

						case 3:
							{
							State = 55; underline();
							}
							break;

						case 4:
							{
							State = 56; title();
							}
							break;

						case 5:
							{
							State = 57; heading1();
							}
							break;

						case 6:
							{
							State = 58; heading2();
							}
							break;

						case 7:
							{
							State = 59; heading3();
							}
							break;

						case 8:
							{
							State = 60; nested();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 63;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 65; Match(BOLD);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItalicTextContext : ParserRuleContext {
		public ITerminalNode[] ITALIC() { return GetTokens(DocumentSpecParser.ITALIC); }
		public ITerminalNode ITALIC(int i) {
			return GetToken(DocumentSpecParser.ITALIC, i);
		}
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public ItalicTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_italicText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterItalicText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitItalicText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItalicText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItalicTextContext italicText() {
		ItalicTextContext _localctx = new ItalicTextContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_italicText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(ITALIC);
			State = 70; Match(TEXT);
			State = 71; Match(ITALIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItalicContext : ParserRuleContext {
		public ItalicTextContext italicText() {
			return GetRuleContext<ItalicTextContext>(0);
		}
		public ITerminalNode[] ITALIC() { return GetTokens(DocumentSpecParser.ITALIC); }
		public ITerminalNode ITALIC(int i) {
			return GetToken(DocumentSpecParser.ITALIC, i);
		}
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public BoldContext[] bold() {
			return GetRuleContexts<BoldContext>();
		}
		public BoldContext bold(int i) {
			return GetRuleContext<BoldContext>(i);
		}
		public UnderlineContext[] underline() {
			return GetRuleContexts<UnderlineContext>();
		}
		public UnderlineContext underline(int i) {
			return GetRuleContext<UnderlineContext>(i);
		}
		public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public ItalicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_italic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterItalic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitItalic(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItalic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItalicContext italic() {
		ItalicContext _localctx = new ItalicContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_italic);
		try {
			int _alt;
			State = 89;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; italicText();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; Match(ITALIC);
				State = 83;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 83;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
						case 1:
							{
							State = 75; text();
							}
							break;

						case 2:
							{
							State = 76; bold();
							}
							break;

						case 3:
							{
							State = 77; underline();
							}
							break;

						case 4:
							{
							State = 78; title();
							}
							break;

						case 5:
							{
							State = 79; heading1();
							}
							break;

						case 6:
							{
							State = 80; heading2();
							}
							break;

						case 7:
							{
							State = 81; heading3();
							}
							break;

						case 8:
							{
							State = 82; nested();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 85;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 87; Match(ITALIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnderlineTextContext : ParserRuleContext {
		public ITerminalNode[] UNDERLINE() { return GetTokens(DocumentSpecParser.UNDERLINE); }
		public ITerminalNode UNDERLINE(int i) {
			return GetToken(DocumentSpecParser.UNDERLINE, i);
		}
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public UnderlineTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_underlineText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterUnderlineText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitUnderlineText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnderlineText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnderlineTextContext underlineText() {
		UnderlineTextContext _localctx = new UnderlineTextContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_underlineText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(UNDERLINE);
			State = 92; Match(TEXT);
			State = 93; Match(UNDERLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnderlineContext : ParserRuleContext {
		public UnderlineTextContext underlineText() {
			return GetRuleContext<UnderlineTextContext>(0);
		}
		public ITerminalNode[] UNDERLINE() { return GetTokens(DocumentSpecParser.UNDERLINE); }
		public ITerminalNode UNDERLINE(int i) {
			return GetToken(DocumentSpecParser.UNDERLINE, i);
		}
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public BoldContext[] bold() {
			return GetRuleContexts<BoldContext>();
		}
		public BoldContext bold(int i) {
			return GetRuleContext<BoldContext>(i);
		}
		public ItalicContext[] italic() {
			return GetRuleContexts<ItalicContext>();
		}
		public ItalicContext italic(int i) {
			return GetRuleContext<ItalicContext>(i);
		}
		public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public UnderlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_underline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterUnderline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitUnderline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnderline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnderlineContext underline() {
		UnderlineContext _localctx = new UnderlineContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_underline);
		try {
			int _alt;
			State = 111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; underlineText();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; Match(UNDERLINE);
				State = 105;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 105;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
						case 1:
							{
							State = 97; text();
							}
							break;

						case 2:
							{
							State = 98; bold();
							}
							break;

						case 3:
							{
							State = 99; italic();
							}
							break;

						case 4:
							{
							State = 100; title();
							}
							break;

						case 5:
							{
							State = 101; heading1();
							}
							break;

						case 6:
							{
							State = 102; heading2();
							}
							break;

						case 7:
							{
							State = 103; heading3();
							}
							break;

						case 8:
							{
							State = 104; nested();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 107;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 109; Match(UNDERLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		public ITerminalNode TITLE() { return GetToken(DocumentSpecParser.TITLE, 0); }
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public ITerminalNode TITEND() { return GetToken(DocumentSpecParser.TITEND, 0); }
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(TITLE);
			State = 114; Match(TEXT);
			State = 115; Match(TITEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading1Context : ParserRuleContext {
		public ITerminalNode HEADING1() { return GetToken(DocumentSpecParser.HEADING1, 0); }
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public Heading1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterHeading1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitHeading1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading1Context heading1() {
		Heading1Context _localctx = new Heading1Context(_ctx, State);
		EnterRule(_localctx, 18, RULE_heading1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(HEADING1);
			State = 118; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading2Context : ParserRuleContext {
		public ITerminalNode HEADING2() { return GetToken(DocumentSpecParser.HEADING2, 0); }
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public Heading2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterHeading2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitHeading2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading2Context heading2() {
		Heading2Context _localctx = new Heading2Context(_ctx, State);
		EnterRule(_localctx, 20, RULE_heading2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(HEADING2);
			State = 121; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading3Context : ParserRuleContext {
		public ITerminalNode HEADING3() { return GetToken(DocumentSpecParser.HEADING3, 0); }
		public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public Heading3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterHeading3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitHeading3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading3Context heading3() {
		Heading3Context _localctx = new Heading3Context(_ctx, State);
		EnterRule(_localctx, 22, RULE_heading3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(HEADING3);
			State = 124; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedContext : ParserRuleContext {
		public BoldContext[] bold() {
			return GetRuleContexts<BoldContext>();
		}
		public BoldContext bold(int i) {
			return GetRuleContext<BoldContext>(i);
		}
		public ItalicContext[] italic() {
			return GetRuleContexts<ItalicContext>();
		}
		public ItalicContext italic(int i) {
			return GetRuleContext<ItalicContext>(i);
		}
		public UnderlineContext[] underline() {
			return GetRuleContexts<UnderlineContext>();
		}
		public UnderlineContext underline(int i) {
			return GetRuleContext<UnderlineContext>(i);
		}
		public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public List_itemContext[] list_item() {
			return GetRuleContexts<List_itemContext>();
		}
		public List_itemContext list_item(int i) {
			return GetRuleContext<List_itemContext>(i);
		}
		public List_numberContext[] list_number() {
			return GetRuleContexts<List_numberContext>();
		}
		public List_numberContext list_number(int i) {
			return GetRuleContext<List_numberContext>(i);
		}
		public NestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterNested(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitNested(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedContext nested() {
		NestedContext _localctx = new NestedContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_nested);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 136;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case BOLD:
						{
						State = 126; bold();
						}
						break;
					case ITALIC:
						{
						State = 127; italic();
						}
						break;
					case UNDERLINE:
						{
						State = 128; underline();
						}
						break;
					case TITLE:
						{
						State = 129; title();
						}
						break;
					case HEADING1:
						{
						State = 130; heading1();
						}
						break;
					case HEADING2:
						{
						State = 131; heading2();
						}
						break;
					case HEADING3:
						{
						State = 132; heading3();
						}
						break;
					case TEXT:
						{
						State = 133; text();
						}
						break;
					case CORCHETE:
						{
						State = 134; list_item();
						}
						break;
					case LLAVE:
						{
						State = 135; list_number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 138;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_itemContext : ParserRuleContext {
		public ITerminalNode CORCHETE() { return GetToken(DocumentSpecParser.CORCHETE, 0); }
		public ITerminalNode CORCHETEFINAL() { return GetToken(DocumentSpecParser.CORCHETEFINAL, 0); }
		public ITerminalNode[] HYPHEN() { return GetTokens(DocumentSpecParser.HYPHEN); }
		public ITerminalNode HYPHEN(int i) {
			return GetToken(DocumentSpecParser.HYPHEN, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(DocumentSpecParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(DocumentSpecParser.TEXT, i);
		}
		public ITerminalNode[] COMA() { return GetTokens(DocumentSpecParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(DocumentSpecParser.COMA, i);
		}
		public List_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterList_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitList_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_itemContext list_item() {
		List_itemContext _localctx = new List_itemContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_list_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(CORCHETE);
			State = 146;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==HYPHEN) {
				{
				{
				State = 141; Match(HYPHEN);
				State = 142; Match(TEXT);
				State = 143; Match(COMA);
				}
				}
				State = 148;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 149; Match(CORCHETEFINAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_numberContext : ParserRuleContext {
		public ITerminalNode LLAVE() { return GetToken(DocumentSpecParser.LLAVE, 0); }
		public ITerminalNode LLAVEFINAL() { return GetToken(DocumentSpecParser.LLAVEFINAL, 0); }
		public ITerminalNode[] HYPHEN() { return GetTokens(DocumentSpecParser.HYPHEN); }
		public ITerminalNode HYPHEN(int i) {
			return GetToken(DocumentSpecParser.HYPHEN, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(DocumentSpecParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(DocumentSpecParser.TEXT, i);
		}
		public ITerminalNode[] COMA() { return GetTokens(DocumentSpecParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(DocumentSpecParser.COMA, i);
		}
		public List_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.EnterList_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDocumentSpecListener typedListener = listener as IDocumentSpecListener;
			if (typedListener != null) typedListener.ExitList_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_numberContext list_number() {
		List_numberContext _localctx = new List_numberContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_list_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(LLAVE);
			State = 157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==HYPHEN) {
				{
				{
				State = 152; Match(HYPHEN);
				State = 153; Match(TEXT);
				State = 154; Match(COMA);
				}
				}
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 160; Match(LLAVEFINAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x13\xA5\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x6\x2,\n\x2\r\x2\xE\x2-\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5@\n\x5\r\x5"+
		"\xE\x5\x41\x3\x5\x3\x5\x5\x5\x46\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x6\aV\n\a\r\a\xE\aW\x3\a\x3"+
		"\a\x5\a\\\n\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x6\tl\n\t\r\t\xE\tm\x3\t\x3\t\x5\tr\n\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x6\xE\x8B\n\xE\r\xE\xE\xE\x8C\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\a\xF\x93\n\xF\f\xF\xE\xF\x96\v\xF\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\a\x10\x9E\n\x10\f\x10\xE\x10\xA1\v\x10\x3\x10"+
		"\x3\x10\x3\x10\x2\x2\x2\x11\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2\x2\x2\xC7\x2+\x3"+
		"\x2\x2\x2\x4/\x3\x2\x2\x2\x6\x31\x3\x2\x2\x2\b\x45\x3\x2\x2\x2\nG\x3\x2"+
		"\x2\x2\f[\x3\x2\x2\x2\xE]\x3\x2\x2\x2\x10q\x3\x2\x2\x2\x12s\x3\x2\x2\x2"+
		"\x14w\x3\x2\x2\x2\x16z\x3\x2\x2\x2\x18}\x3\x2\x2\x2\x1A\x8A\x3\x2\x2\x2"+
		"\x1C\x8E\x3\x2\x2\x2\x1E\x99\x3\x2\x2\x2 ,\x5\x4\x3\x2!,\x5\x1C\xF\x2"+
		"\",\x5\x1E\x10\x2#,\x5\b\x5\x2$,\x5\f\a\x2%,\x5\x10\t\x2&,\x5\x12\n\x2"+
		"\',\x5\x14\v\x2(,\x5\x16\f\x2),\x5\x18\r\x2*,\x5\x1A\xE\x2+ \x3\x2\x2"+
		"\x2+!\x3\x2\x2\x2+\"\x3\x2\x2\x2+#\x3\x2\x2\x2+$\x3\x2\x2\x2+%\x3\x2\x2"+
		"\x2+&\x3\x2\x2\x2+\'\x3\x2\x2\x2+(\x3\x2\x2\x2+)\x3\x2\x2\x2+*\x3\x2\x2"+
		"\x2,-\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2.\x3\x3\x2\x2\x2/\x30\a\x11"+
		"\x2\x2\x30\x5\x3\x2\x2\x2\x31\x32\a\x3\x2\x2\x32\x33\a\x11\x2\x2\x33\x34"+
		"\a\x3\x2\x2\x34\a\x3\x2\x2\x2\x35\x46\x5\x6\x4\x2\x36?\a\x3\x2\x2\x37"+
		"@\x5\x4\x3\x2\x38@\x5\f\a\x2\x39@\x5\x10\t\x2:@\x5\x12\n\x2;@\x5\x14\v"+
		"\x2<@\x5\x16\f\x2=@\x5\x18\r\x2>@\x5\x1A\xE\x2?\x37\x3\x2\x2\x2?\x38\x3"+
		"\x2\x2\x2?\x39\x3\x2\x2\x2?:\x3\x2\x2\x2?;\x3\x2\x2\x2?<\x3\x2\x2\x2?"+
		"=\x3\x2\x2\x2?>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42"+
		"\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x44\a\x3\x2\x2\x44\x46\x3\x2\x2\x2"+
		"\x45\x35\x3\x2\x2\x2\x45\x36\x3\x2\x2\x2\x46\t\x3\x2\x2\x2GH\a\x4\x2\x2"+
		"HI\a\x11\x2\x2IJ\a\x4\x2\x2J\v\x3\x2\x2\x2K\\\x5\n\x6\x2LU\a\x4\x2\x2"+
		"MV\x5\x4\x3\x2NV\x5\b\x5\x2OV\x5\x10\t\x2PV\x5\x12\n\x2QV\x5\x14\v\x2"+
		"RV\x5\x16\f\x2SV\x5\x18\r\x2TV\x5\x1A\xE\x2UM\x3\x2\x2\x2UN\x3\x2\x2\x2"+
		"UO\x3\x2\x2\x2UP\x3\x2\x2\x2UQ\x3\x2\x2\x2UR\x3\x2\x2\x2US\x3\x2\x2\x2"+
		"UT\x3\x2\x2\x2VW\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2XY\x3\x2\x2\x2"+
		"YZ\a\x4\x2\x2Z\\\x3\x2\x2\x2[K\x3\x2\x2\x2[L\x3\x2\x2\x2\\\r\x3\x2\x2"+
		"\x2]^\a\x5\x2\x2^_\a\x11\x2\x2_`\a\x5\x2\x2`\xF\x3\x2\x2\x2\x61r\x5\xE"+
		"\b\x2\x62k\a\x5\x2\x2\x63l\x5\x4\x3\x2\x64l\x5\b\x5\x2\x65l\x5\f\a\x2"+
		"\x66l\x5\x12\n\x2gl\x5\x14\v\x2hl\x5\x16\f\x2il\x5\x18\r\x2jl\x5\x1A\xE"+
		"\x2k\x63\x3\x2\x2\x2k\x64\x3\x2\x2\x2k\x65\x3\x2\x2\x2k\x66\x3\x2\x2\x2"+
		"kg\x3\x2\x2\x2kh\x3\x2\x2\x2ki\x3\x2\x2\x2kj\x3\x2\x2\x2lm\x3\x2\x2\x2"+
		"mk\x3\x2\x2\x2mn\x3\x2\x2\x2no\x3\x2\x2\x2op\a\x5\x2\x2pr\x3\x2\x2\x2"+
		"q\x61\x3\x2\x2\x2q\x62\x3\x2\x2\x2r\x11\x3\x2\x2\x2st\a\x6\x2\x2tu\a\x11"+
		"\x2\x2uv\a\a\x2\x2v\x13\x3\x2\x2\x2wx\a\xE\x2\x2xy\a\x11\x2\x2y\x15\x3"+
		"\x2\x2\x2z{\a\xF\x2\x2{|\a\x11\x2\x2|\x17\x3\x2\x2\x2}~\a\x10\x2\x2~\x7F"+
		"\a\x11\x2\x2\x7F\x19\x3\x2\x2\x2\x80\x8B\x5\b\x5\x2\x81\x8B\x5\f\a\x2"+
		"\x82\x8B\x5\x10\t\x2\x83\x8B\x5\x12\n\x2\x84\x8B\x5\x14\v\x2\x85\x8B\x5"+
		"\x16\f\x2\x86\x8B\x5\x18\r\x2\x87\x8B\x5\x4\x3\x2\x88\x8B\x5\x1C\xF\x2"+
		"\x89\x8B\x5\x1E\x10\x2\x8A\x80\x3\x2\x2\x2\x8A\x81\x3\x2\x2\x2\x8A\x82"+
		"\x3\x2\x2\x2\x8A\x83\x3\x2\x2\x2\x8A\x84\x3\x2\x2\x2\x8A\x85\x3\x2\x2"+
		"\x2\x8A\x86\x3\x2\x2\x2\x8A\x87\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x89"+
		"\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2"+
		"\x2\x8D\x1B\x3\x2\x2\x2\x8E\x94\a\b\x2\x2\x8F\x90\a\r\x2\x2\x90\x91\a"+
		"\x11\x2\x2\x91\x93\a\f\x2\x2\x92\x8F\x3\x2\x2\x2\x93\x96\x3\x2\x2\x2\x94"+
		"\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x97\x3\x2\x2\x2\x96\x94\x3\x2"+
		"\x2\x2\x97\x98\a\t\x2\x2\x98\x1D\x3\x2\x2\x2\x99\x9F\a\n\x2\x2\x9A\x9B"+
		"\a\r\x2\x2\x9B\x9C\a\x11\x2\x2\x9C\x9E\a\f\x2\x2\x9D\x9A\x3\x2\x2\x2\x9E"+
		"\xA1\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA2\x3\x2"+
		"\x2\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA3\a\v\x2\x2\xA3\x1F\x3\x2\x2\x2\x11+"+
		"-?\x41\x45UW[kmq\x8A\x8C\x94\x9F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Final2.Content
